#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRUD_Con_Linq_y_SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Crud_Linq")]
	public partial class LinqDCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmpresa(Empresa instance);
    partial void UpdateEmpresa(Empresa instance);
    partial void DeleteEmpresa(Empresa instance);
    partial void InsertEmpleado(Empleado instance);
    partial void UpdateEmpleado(Empleado instance);
    partial void DeleteEmpleado(Empleado instance);
    partial void InsertCargo(Cargo instance);
    partial void UpdateCargo(Cargo instance);
    partial void DeleteCargo(Cargo instance);
    partial void InsertCargo_Empleado(Cargo_Empleado instance);
    partial void UpdateCargo_Empleado(Cargo_Empleado instance);
    partial void DeleteCargo_Empleado(Cargo_Empleado instance);
    #endregion
		
		public LinqDCDataContext() : 
				base(global::CRUD_Con_Linq_y_SQL.Properties.Settings.Default.Crud_LinqConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Empresa> Empresas
		{
			get
			{
				return this.GetTable<Empresa>();
			}
		}
		
		public System.Data.Linq.Table<Empleado> Empleados
		{
			get
			{
				return this.GetTable<Empleado>();
			}
		}
		
		public System.Data.Linq.Table<Cargo> Cargos
		{
			get
			{
				return this.GetTable<Cargo>();
			}
		}
		
		public System.Data.Linq.Table<Cargo_Empleado> Cargo_Empleados
		{
			get
			{
				return this.GetTable<Cargo_Empleado>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Empresa")]
	public partial class Empresa : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEmpresa;
		
		private string _nombreEmpresa;
		
		private EntitySet<Empleado> _Empleados;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEmpresaChanging(int value);
    partial void OnidEmpresaChanged();
    partial void OnnombreEmpresaChanging(string value);
    partial void OnnombreEmpresaChanged();
    #endregion
		
		public Empresa()
		{
			this._Empleados = new EntitySet<Empleado>(new Action<Empleado>(this.attach_Empleados), new Action<Empleado>(this.detach_Empleados));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmpresa", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEmpresa
		{
			get
			{
				return this._idEmpresa;
			}
			set
			{
				if ((this._idEmpresa != value))
				{
					this.OnidEmpresaChanging(value);
					this.SendPropertyChanging();
					this._idEmpresa = value;
					this.SendPropertyChanged("idEmpresa");
					this.OnidEmpresaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombreEmpresa", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nombreEmpresa
		{
			get
			{
				return this._nombreEmpresa;
			}
			set
			{
				if ((this._nombreEmpresa != value))
				{
					this.OnnombreEmpresaChanging(value);
					this.SendPropertyChanging();
					this._nombreEmpresa = value;
					this.SendPropertyChanged("nombreEmpresa");
					this.OnnombreEmpresaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Empresa_Empleado", Storage="_Empleados", ThisKey="idEmpresa", OtherKey="idEmpresa")]
		public EntitySet<Empleado> Empleados
		{
			get
			{
				return this._Empleados;
			}
			set
			{
				this._Empleados.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Empleados(Empleado entity)
		{
			this.SendPropertyChanging();
			entity.Empresa = this;
		}
		
		private void detach_Empleados(Empleado entity)
		{
			this.SendPropertyChanging();
			entity.Empresa = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Empleado")]
	public partial class Empleado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEmpleado;
		
		private string _nombreEmpleado;
		
		private string _apellidoEmpleado;
		
		private System.Nullable<int> _idEmpresa;
		
		private EntitySet<Cargo_Empleado> _Cargo_Empleados;
		
		private EntityRef<Empresa> _Empresa;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEmpleadoChanging(int value);
    partial void OnidEmpleadoChanged();
    partial void OnnombreEmpleadoChanging(string value);
    partial void OnnombreEmpleadoChanged();
    partial void OnapellidoEmpleadoChanging(string value);
    partial void OnapellidoEmpleadoChanged();
    partial void OnidEmpresaChanging(System.Nullable<int> value);
    partial void OnidEmpresaChanged();
    #endregion
		
		public Empleado()
		{
			this._Cargo_Empleados = new EntitySet<Cargo_Empleado>(new Action<Cargo_Empleado>(this.attach_Cargo_Empleados), new Action<Cargo_Empleado>(this.detach_Cargo_Empleados));
			this._Empresa = default(EntityRef<Empresa>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmpleado", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEmpleado
		{
			get
			{
				return this._idEmpleado;
			}
			set
			{
				if ((this._idEmpleado != value))
				{
					this.OnidEmpleadoChanging(value);
					this.SendPropertyChanging();
					this._idEmpleado = value;
					this.SendPropertyChanged("idEmpleado");
					this.OnidEmpleadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombreEmpleado", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nombreEmpleado
		{
			get
			{
				return this._nombreEmpleado;
			}
			set
			{
				if ((this._nombreEmpleado != value))
				{
					this.OnnombreEmpleadoChanging(value);
					this.SendPropertyChanging();
					this._nombreEmpleado = value;
					this.SendPropertyChanged("nombreEmpleado");
					this.OnnombreEmpleadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_apellidoEmpleado", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string apellidoEmpleado
		{
			get
			{
				return this._apellidoEmpleado;
			}
			set
			{
				if ((this._apellidoEmpleado != value))
				{
					this.OnapellidoEmpleadoChanging(value);
					this.SendPropertyChanging();
					this._apellidoEmpleado = value;
					this.SendPropertyChanged("apellidoEmpleado");
					this.OnapellidoEmpleadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmpresa", DbType="Int")]
		public System.Nullable<int> idEmpresa
		{
			get
			{
				return this._idEmpresa;
			}
			set
			{
				if ((this._idEmpresa != value))
				{
					if (this._Empresa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmpresaChanging(value);
					this.SendPropertyChanging();
					this._idEmpresa = value;
					this.SendPropertyChanged("idEmpresa");
					this.OnidEmpresaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Empleado_Cargo_Empleado", Storage="_Cargo_Empleados", ThisKey="idEmpleado", OtherKey="idEmpleado")]
		public EntitySet<Cargo_Empleado> Cargo_Empleados
		{
			get
			{
				return this._Cargo_Empleados;
			}
			set
			{
				this._Cargo_Empleados.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Empresa_Empleado", Storage="_Empresa", ThisKey="idEmpresa", OtherKey="idEmpresa", IsForeignKey=true, DeleteRule="CASCADE")]
		public Empresa Empresa
		{
			get
			{
				return this._Empresa.Entity;
			}
			set
			{
				Empresa previousValue = this._Empresa.Entity;
				if (((previousValue != value) 
							|| (this._Empresa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Empresa.Entity = null;
						previousValue.Empleados.Remove(this);
					}
					this._Empresa.Entity = value;
					if ((value != null))
					{
						value.Empleados.Add(this);
						this._idEmpresa = value.idEmpresa;
					}
					else
					{
						this._idEmpresa = default(Nullable<int>);
					}
					this.SendPropertyChanged("Empresa");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cargo_Empleados(Cargo_Empleado entity)
		{
			this.SendPropertyChanging();
			entity.Empleado = this;
		}
		
		private void detach_Cargo_Empleados(Cargo_Empleado entity)
		{
			this.SendPropertyChanging();
			entity.Empleado = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cargo")]
	public partial class Cargo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCargo;
		
		private string _nombreCargo;
		
		private EntitySet<Cargo_Empleado> _Cargo_Empleados;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCargoChanging(int value);
    partial void OnidCargoChanged();
    partial void OnnombreCargoChanging(string value);
    partial void OnnombreCargoChanged();
    #endregion
		
		public Cargo()
		{
			this._Cargo_Empleados = new EntitySet<Cargo_Empleado>(new Action<Cargo_Empleado>(this.attach_Cargo_Empleados), new Action<Cargo_Empleado>(this.detach_Cargo_Empleados));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCargo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCargo
		{
			get
			{
				return this._idCargo;
			}
			set
			{
				if ((this._idCargo != value))
				{
					this.OnidCargoChanging(value);
					this.SendPropertyChanging();
					this._idCargo = value;
					this.SendPropertyChanged("idCargo");
					this.OnidCargoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombreCargo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nombreCargo
		{
			get
			{
				return this._nombreCargo;
			}
			set
			{
				if ((this._nombreCargo != value))
				{
					this.OnnombreCargoChanging(value);
					this.SendPropertyChanging();
					this._nombreCargo = value;
					this.SendPropertyChanged("nombreCargo");
					this.OnnombreCargoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cargo_Cargo_Empleado", Storage="_Cargo_Empleados", ThisKey="idCargo", OtherKey="idCargo")]
		public EntitySet<Cargo_Empleado> Cargo_Empleados
		{
			get
			{
				return this._Cargo_Empleados;
			}
			set
			{
				this._Cargo_Empleados.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cargo_Empleados(Cargo_Empleado entity)
		{
			this.SendPropertyChanging();
			entity.Cargo = this;
		}
		
		private void detach_Cargo_Empleados(Cargo_Empleado entity)
		{
			this.SendPropertyChanging();
			entity.Cargo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cargo_Empleado")]
	public partial class Cargo_Empleado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCargoEmpleado;
		
		private int _idEmpleado;
		
		private int _idCargo;
		
		private EntityRef<Cargo> _Cargo;
		
		private EntityRef<Empleado> _Empleado;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCargoEmpleadoChanging(int value);
    partial void OnidCargoEmpleadoChanged();
    partial void OnidEmpleadoChanging(int value);
    partial void OnidEmpleadoChanged();
    partial void OnidCargoChanging(int value);
    partial void OnidCargoChanged();
    #endregion
		
		public Cargo_Empleado()
		{
			this._Cargo = default(EntityRef<Cargo>);
			this._Empleado = default(EntityRef<Empleado>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCargoEmpleado", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCargoEmpleado
		{
			get
			{
				return this._idCargoEmpleado;
			}
			set
			{
				if ((this._idCargoEmpleado != value))
				{
					this.OnidCargoEmpleadoChanging(value);
					this.SendPropertyChanging();
					this._idCargoEmpleado = value;
					this.SendPropertyChanged("idCargoEmpleado");
					this.OnidCargoEmpleadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEmpleado", DbType="Int NOT NULL")]
		public int idEmpleado
		{
			get
			{
				return this._idEmpleado;
			}
			set
			{
				if ((this._idEmpleado != value))
				{
					if (this._Empleado.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmpleadoChanging(value);
					this.SendPropertyChanging();
					this._idEmpleado = value;
					this.SendPropertyChanged("idEmpleado");
					this.OnidEmpleadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCargo", DbType="Int NOT NULL")]
		public int idCargo
		{
			get
			{
				return this._idCargo;
			}
			set
			{
				if ((this._idCargo != value))
				{
					if (this._Cargo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCargoChanging(value);
					this.SendPropertyChanging();
					this._idCargo = value;
					this.SendPropertyChanged("idCargo");
					this.OnidCargoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cargo_Cargo_Empleado", Storage="_Cargo", ThisKey="idCargo", OtherKey="idCargo", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Cargo Cargo
		{
			get
			{
				return this._Cargo.Entity;
			}
			set
			{
				Cargo previousValue = this._Cargo.Entity;
				if (((previousValue != value) 
							|| (this._Cargo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cargo.Entity = null;
						previousValue.Cargo_Empleados.Remove(this);
					}
					this._Cargo.Entity = value;
					if ((value != null))
					{
						value.Cargo_Empleados.Add(this);
						this._idCargo = value.idCargo;
					}
					else
					{
						this._idCargo = default(int);
					}
					this.SendPropertyChanged("Cargo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Empleado_Cargo_Empleado", Storage="_Empleado", ThisKey="idEmpleado", OtherKey="idEmpleado", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Empleado Empleado
		{
			get
			{
				return this._Empleado.Entity;
			}
			set
			{
				Empleado previousValue = this._Empleado.Entity;
				if (((previousValue != value) 
							|| (this._Empleado.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Empleado.Entity = null;
						previousValue.Cargo_Empleados.Remove(this);
					}
					this._Empleado.Entity = value;
					if ((value != null))
					{
						value.Cargo_Empleados.Add(this);
						this._idEmpleado = value.idEmpleado;
					}
					else
					{
						this._idEmpleado = default(int);
					}
					this.SendPropertyChanged("Empleado");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
